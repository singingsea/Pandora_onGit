function data = plot_merged_QDOAS_PanPS_NO2()
filename = 'C:\Projects\Zenith_NO2\plots\QDOAS_PanPS_ref2016.csv';
data = importfile(filename);

DU = 2.6870e+16;
data.VCD = data.NO2_VCD;
data.dSCD = data.NO2_VisSlColno2./DU;
data.CI = data.Fluxes450./data.Fluxes500;

% CI filter
%TF = data.CI <= 1.1;
%data = data(TF,:);

% SZA groups
TF1 = (data.SZA > 20) & (data.SZA <= 30);
TF2 = (data.SZA > 30) & (data.SZA <= 40);
TF3 = (data.SZA > 40) & (data.SZA <= 50);
TF4 = (data.SZA > 50) & (data.SZA <= 60);
TF5 = (data.SZA > 60) & (data.SZA <= 70);
TF6 = (data.SZA > 70) & (data.SZA <= 80);
TF7 = (data.SZA > 80) & (data.SZA <= 90);


%% fig 1
figure; hold all;
dscatter(data.dSCD,data.VCD);
xlabel('ZS dSCD [DU]');
ylabel('DS VCD [DU]');
grid on;

%% fig 2
figure; hold all;
y = data.dSCD(TF1,:); x = data.VCD(TF1,:);
scatter(x,y,'filled');
%plot_simple_linear_fit(x,y);
plot_simple_nl_fit(x,y);

y = data.dSCD(TF2,:); x = data.VCD(TF2,:);
scatter(x,y,'filled');
%plot_simple_linear_fit(x,y);
plot_simple_nl_fit(x,y);

y = data.dSCD(TF3,:); x = data.VCD(TF3,:);
scatter(x,y,'filled');
%plot_simple_linear_fit(x,y);
plot_simple_nl_fit(x,y);

y = data.dSCD(TF4,:); x = data.VCD(TF4,:);
scatter(x,y,'filled');
%plot_simple_linear_fit(x,y);
plot_simple_nl_fit(x,y);

y = data.dSCD(TF5,:); x = data.VCD(TF5,:);
scatter(x,y,'filled');
%plot_simple_linear_fit(x,y);
plot_simple_nl_fit(x,y);

y = data.dSCD(TF6,:); x = data.VCD(TF6,:);
scatter(x,y,'filled');
%plot_simple_linear_fit(x,y);
plot_simple_nl_fit(x,y);

y = data.dSCD(TF7,:); x = data.VCD(TF7,:);
scatter(x,y,'filled');
%plot_simple_linear_fit(x,y);
plot_simple_nl_fit(x,y);

ylabel('ZS dSCD [DU]');
xlabel('DS VCD [DU]');
grid on;
xlim([-1 7]);
ylim([-1 7]);
legend('SZA 20-30','linear fit','SZA 30-40','linear fit','SZA 40-50','linear fit',...
    'SZA 50-60','linear fit','SZA 60-70','linear fit','SZA 70-80','linear fit','SZA 80-90','linear fit');

%% fig 3
figure; hold all;
dscatter(data.SZA,data.CI);
ylabel('CI [450nm/500nm]');
xlabel('SZA');

%% fig 4
figure; hold all;
dscatter(data.SZA,data.dSCD);
ylabel('ZS dSCDs [DU]');
xlabel('SZA');







%% 
function plot_simple_linear_fit(x,y)
mdl = fitlm(x,y,'y~1+x1');
intercept = mdl.Coefficients.Estimate(1);
slop = mdl.Coefficients.Estimate(2);
new_x = [-10;10];
new_y = predict(mdl,new_x);
plot(new_x,new_y);
%% 
function plot_simple_nl_fit(x,y)
modelfun = 'y ~ b1*x';
beta0 = [0];
mdl = fitnlm(x,y,modelfun,beta0);

new_x = [-10;10];
new_y = predict(mdl,new_x);
plot(new_x,new_y);

%%
function QDOASPanPSref2016 = importfile(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as a matrix.
%   QDOASPANPSREF2016 = IMPORTFILE1(FILENAME) Reads data from text file
%   FILENAME for the default selection.
%
%   QDOASPANPSREF2016 = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data
%   from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   QDOASPanPSref2016 = importfile1('QDOAS_PanPS_ref2016.csv', 2, 8754);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/03/15 11:30:06

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: datetimes (%{yyyy-MM-dd HH:mm:ss}D)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: double (%f)
%	column24: double (%f)
%   column25: double (%f)
%	column26: double (%f)
%   column27: double (%f)
%	column28: double (%f)
%   column29: double (%f)
%	column30: double (%f)
%   column31: double (%f)
%	column32: double (%f)
%   column33: double (%f)
%	column34: double (%f)
%   column35: double (%f)
%	column36: double (%f)
%   column37: double (%f)
%	column38: double (%f)
%   column39: double (%f)
%	column40: double (%f)
%   column41: double (%f)
%	column42: double (%f)
%   column43: double (%f)
%	column44: datetimes (%{yyyy-MM-dd HH:mm:ss+HH:mm}D)
%   column45: double (%f)
%	column46: double (%f)
%   column47: double (%f)
%	column48: double (%f)
%   column49: double (%f)
%	column50: double (%f)
%   column51: double (%f)
%	column52: double (%f)
%   column53: double (%f)
%	column54: double (%f)
%   column55: categorical (%C)
%	column56: double (%f)
%   column57: double (%f)
%	column58: double (%f)
%   column59: double (%f)
%	column60: double (%f)
%   column61: double (%f)
%	column62: double (%f)
%   column63: double (%f)
%	column64: double (%f)
%   column65: double (%f)
%	column66: text (%q)
%   column67: double (%f)
%	column68: double (%f)
%   column69: double (%f)
%	column70: text (%q)
%   column71: double (%f)
%	column72: double (%f)
%   column73: text (%q)
%	column74: double (%f)
%   column75: double (%f)
%	column76: double (%f)
%   column77: text (%q)
%	column78: double (%f)
%   column79: double (%f)
%	column80: text (%q)
%   column81: double (%f)
%	column82: text (%q)
%   column83: double (%f)
%	column84: text (%q)
%   column85: double (%f)
%	column86: text (%q)
%   column87: double (%f)
%	column88: text (%q)
%   column89: double (%f)
%	column90: text (%q)
%   column91: double (%f)
%	column92: text (%q)
%   column93: double (%f)
%	column94: text (%q)
%   column95: double (%f)
%	column96: text (%q)
%   column97: double (%f)
%	column98: text (%q)
%   column99: double (%f)
%	column100: double (%f)
%   column101: text (%q)
%	column102: double (%f)
%   column103: text (%q)
%	column104: double (%f)
%   column105: text (%q)
%	column106: double (%f)
%   column107: text (%q)
%	column108: double (%f)
%   column109: text (%q)
%	column110: text (%q)
%   column111: double (%f)
%	column112: double (%f)
%   column113: text (%q)
%	column114: text (%q)
%   column115: double (%f)
%	column116: text (%q)
%   column117: double (%f)
%	column118: double (%f)
%   column119: text (%q)
%	column120: double (%f)
%   column121: text (%q)
%	column122: double (%f)
%   column123: double (%f)
%	column124: double (%f)
%   column125: double (%f)
%	column126: double (%f)
%   column127: double (%f)
%	column128: double (%f)
%   column129: double (%f)
%	column130: double (%f)
%   column131: double (%f)
%	column132: double (%f)
%   column133: categorical (%C)
%	column134: datetimes (%{yyyy-MM-dd HH:mm:ss+HH:mm}D)
%   column135: double (%f)
%	column136: double (%f)
%   column137: double (%f)
%	column138: text (%q)
%   column139: datetimes (%{yyyy-MM-dd HH:mm:ss-HH:mm}D)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%{yyyy-MM-dd HH:mm:ss}D%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%{yyyy-MM-dd HH:mm:ss+HH:mm}D%f%f%f%f%f%f%f%f%f%f%C%f%f%f%f%f%f%f%f%f%f%q%f%f%f%q%f%f%q%f%f%f%q%f%f%q%f%q%f%q%f%q%f%q%f%q%f%q%f%q%f%q%f%q%f%f%q%f%q%f%q%f%q%f%q%q%f%f%q%q%f%q%f%f%q%f%q%f%f%f%f%f%f%f%f%f%f%f%C%{yyyy-MM-dd HH:mm:ss+HH:mm}D%f%f%f%q%{yyyy-MM-dd HH:mm:ss-HH:mm}D%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
QDOASPanPSref2016 = table(dataArray{1:end-1}, 'VariableNames', {'VarName1','DateDDMMYYYY_Timehhmmss','SpecNo','Year','Fractionalday','Fractionaltime','SZA','SolarAzimuthAngle','Elevviewingangle','Azimviewingangle','NO2_VisRMS','NO2_VisRefZm','NO2_VisSlColo3','NO2_VisSlErro3','NO2_VisSlColno2','NO2_VisSlErrno2','NO2_VisSlColo4','NO2_VisSlErro4','NO2_VisSlColh2o','NO2_VisSlErrh2o','NO2_VisSlColring','NO2_VisSlErrring','O3_VisRMS','O3_VisRefZm','O3_VisSlColo3','O3_VisSlErro3','O3_VisSlColno2','O3_VisSlErrno2','O3_VisSlColo4','O3_VisSlErro4','O3_VisSlColh2o','O3_VisSlErrh2o','O3_VisSlColring','O3_VisSlErrring','Fluxes330','Fluxes340','Fluxes350','Fluxes380','Fluxes440','Fluxes450','Fluxes500','Fluxes550','Unnamed42','UTC','Column10Pointingzenithangleindegreeabsoluteorrelativeseenextcol','Column11Zenithpointingmodezenithangleis0absolute1relativetosun2','Column12Pointingazimuthindegreeincreasesclockwiseabsolute0north','Column13Azimuthpointingmodelikezenithanglemodebutalsofixedscatt','Column14Fittingwindowindexuniquenumberforeachfittingwindow','Column15Startingwavelengthoffittingwindownm','Column16Endingwavelengthoffittingwindownm','Column17Orderofsmoothingpolynomialusedinspectralfitting','Column18Orderofoffsetpolynomialusedinspectralfitting1nooffset','Column19Orderofwavelengthchangepolynomialusedinspectralfitting1','Column1Twolettercodeofmeasurementroutine','Column20Sumover2iwithibeingafittingconfigurationindex0Ringspect','Column21Fittingresultindex12noerror2error','Column22Numberoffunctionevaluationsused0linearfitting','Column23rmsofunweightedspectralfittingresidualsnegativevaluefit','Column24Normalizedrmsofweightedspectralfittingresidualsnegative','Column25Expectedrmsbasedonmeasureduncertaintyonlynegativevaluef','Column26Expectednormalizedrmsbasedonmeasureduncertaintyonlynega','Column27OzoneslantcolumnamountDobsonUnits9e99notfittedorfitting','Column28UncertaintyofozoneslantcolumnamountDobsonUnitsnegativev','Column29Geometricalozoneairmassfactor','Column2UTdateandtimeforbeginningofmeasurementyyyymmddThhmmssZIS','Column30NitrogendioxideslantcolumnamountDobsonUnits9e99notfitte','Column31UncertaintyofnitrogendioxideslantcolumnamountDobsonUnit','Column32Geometricalnitrogendioxideairmassfactor','Column33SulfurdioxideslantcolumnamountDobsonUnits9e99notfittedo','Column34UncertaintyofsulfurdioxideslantcolumnamountDobsonUnitsn','Column35Geometricalsulfurdioxideairmassfactor','Column36FormaldehydeslantcolumnamountDobsonUnits9e99notfittedor','Column37UncertaintyofformaldehydeslantcolumnamountDobsonUnitsne','Column38Geometricalformaldehydeairmassfactor','Column39FittedRingspectrum9e99notfittedorfittingnotsuccessfull','Column39Fittingpolynomialcoefficientorder0','Column3Routinecount1forthefirstroutineoftheday2forthesecondetc','Column40UncertaintyoffittedRingspectrumnegativevaluenotfittedor','Column40Uncertaintyoffittingpolynomialcoefficientorder0negative','Column41Fittingpolynomialcoefficientorder0','Column41Fittingpolynomialcoefficientorder1','Column42Uncertaintyoffittingpolynomialcoefficientorder0negative','Column42Uncertaintyoffittingpolynomialcoefficientorder1negative','Column43Fittingpolynomialcoefficientorder1','Column43Fittingpolynomialcoefficientorder2','Column44Uncertaintyoffittingpolynomialcoefficientorder1negative','Column44Uncertaintyoffittingpolynomialcoefficientorder2negative','Column45Fittingpolynomialcoefficientorder2','Column45Fittingpolynomialcoefficientorder3','Column46Uncertaintyoffittingpolynomialcoefficientorder2negative','Column46Uncertaintyoffittingpolynomialcoefficientorder3negative','Column47Fittingpolynomialcoefficientorder3','Column47Fittingpolynomialcoefficientorder4','Column48Uncertaintyoffittingpolynomialcoefficientorder3negative','Column48Uncertaintyoffittingpolynomialcoefficientorder4negative','Column49Fittingpolynomialcoefficientorder4','Column49Offsetpolynomialcoefficientorder0','Column4Repetitioncount1forthefirstsetintheroutine2fortheseconde','Column50Uncertaintyoffittingpolynomialcoefficientorder4negative','Column50Uncertaintyofoffsetpolynomialcoefficientorder0negativev','Column51Offsetpolynomialcoefficientorder0','Column51Wavelengthchangepolynomialcoefficientorder0','Column52Uncertaintyofoffsetpolynomialcoefficientorder0negativev','Column52Uncertaintyofwavelengthchangepolynomialcoefficientorder','Column53Wavelengthchangepolynomialcoefficientorder0','Column53Wavelengthchangepolynomialcoefficientorder1','Column54Uncertaintyofwavelengthchangepolynomialcoefficientorder','Column54Uncertaintyofwavelengthchangepolynomialcoefficientorde1','Column55Sumover2iwithibeingalevel2errorindexseelevel2dataheader','Column55Wavelengthchangepolynomialcoefficientorder1','Column56Uncertaintyofwavelengthchangepolynomialcoefficientorder','Column56WavelengtheffectivetemperatureC999noeffectivetemperatur','Column57Estimatedaverageresidualstraylightlevelseelevel2datahea','Column57Sumover2iwithibeingalevel2errorindexseelevel2dataheader','Column58Retrievedwavelengthshiftfromlevel2datanm9nowavelengthch','Column58WavelengtheffectivetemperatureC999noeffectivetemperatur','Column59Estimatedaverageresidualstraylightlevelseelevel2datahea','Column59Positionoffilterwheel10filterwheelnotused19arevalidposi','Column5Totaldurationofmeasurementsetinseconds','Column60Positionoffilterwheel20filterwheelnotused19arevalidposi','Column60Retrievedwavelengthshiftfromlevel2datanm9nowavelengthch','Column61Positionoffilterwheel10filterwheelnotused19arevalidposi','Column61Signalatpixelclosesttoreferencewavelength','Column62Integrationtimems','Column62Positionoffilterwheel20filterwheelnotused19arevalidposi','Column63Signalatpixelclosesttoreferencewavelength','Column64Integrationtimems','Column6Solarzenithangleatthecentertimeofthemeasurementindegree','Column7Solarazimuthatthecentertimeofthemeasurementindegree0nort','Column8Lunarzenithangleatthecentertimeofthemeasurementindegree','Column9Lunarazimuthatthecentertimeofthemeasurementindegree0nort','location','time','O3_VCD','NO2_VCD','SO2_VCD','HCHO_VCD','LTC'});

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% QDOASPanPSref2016.DateDDMMYYYY_Timehhmmss=datenum(QDOASPanPSref2016.DateDDMMYYYY_Timehhmmss);QDOASPanPSref2016.UTC=datenum(QDOASPanPSref2016.UTC);
% QDOASPanPSref2016.time=datenum(QDOASPanPSref2016.time);
% QDOASPanPSref2016.LTC=datenum(QDOASPanPSref2016.LTC);



