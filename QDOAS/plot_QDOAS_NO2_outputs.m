function [P_ref2014,P_ref2016] = plot_QDOAS_NO2_outputs()
% simple quick check of two QDOAS outputs
DU = 2.6870e+16;
filename1 = 'C:\Projects\Zenith_NO2\QDOAS_outputs\Pandora103_NDACC_O3_NO2_ref20160619.dat';
filename2 = 'C:\Projects\Zenith_NO2\QDOAS_outputs\Pandora103_NDACC_O3_NO2_ref20140622.dat'
P_ref2016 = importfile(filename1);
P_ref2014 = importfile(filename2);
TF_ref2016 = (P_ref2016.NO2_VisSlColno2 < 1e36) & (P_ref2016.DateDDMMYYYY > datetime(2015,1,1));
TF_ref2014 = P_ref2014.NO2_VisSlColno2 < 1e36 & (P_ref2014.DateDDMMYYYY > datetime(2015,1,1));

%% fig 1
figure;hold all;
plot(P_ref2014.DateDDMMYYYY(TF_ref2014,:),P_ref2014.NO2_VisSlColno2(TF_ref2014,:)./DU,'k.');
plot(P_ref2016.DateDDMMYYYY(TF_ref2016,:),P_ref2016.NO2_VisSlColno2(TF_ref2016,:)./DU,'r.');
legend('Ref2014','Ref2016');
mean_ref2014 = mean(P_ref2014.NO2_VisSlColno2(TF_ref2014,:));
mean_ref2016 = mean(P_ref2016.NO2_VisSlColno2(TF_ref2016,:));
std_ref2014 = std(P_ref2014.NO2_VisSlColno2(TF_ref2014,:));
std_ref2016 = std(P_ref2016.NO2_VisSlColno2(TF_ref2016,:));
disp(['mean ref2014 = ' num2str(mean_ref2014) '; std ref2014 = ' num2str(std_ref2014)]);
disp(['mean ref2016 = ' num2str(mean_ref2016) '; std ref2016 = ' num2str(std_ref2016)]);
xlabel('time');
ylabel('NO2 dSCDs [DU]');




function Pandora103NDACCO3NO2ref20160619 = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   PANDORA103NDACCO3NO2REF20160619 = IMPORTFILE(FILENAME) Reads data from
%   text file FILENAME for the default selection.
%
%   PANDORA103NDACCO3NO2REF20160619 = IMPORTFILE(FILENAME, STARTROW,
%   ENDROW) Reads data from rows STARTROW through ENDROW of text file
%   FILENAME.
%
% Example:
%   Pandora103NDACCO3NO2ref20160619 = importfile('Pandora103_NDACC_O3_NO2_ref20160619.dat', 3, 17824);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/03/15 10:32:10

%% Initialize variables.
delimiter = '\t';
if nargin<=2
    startRow = 3;
    endRow = inf;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: datetimes (%{dd/MM/yyyy}D)
%	column10: datetimes (%{HH:mm:ss}D)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: double (%f)
%	column24: double (%f)
%   column25: double (%f)
%	column26: double (%f)
%   column27: double (%f)
%	column28: double (%f)
%   column29: double (%f)
%	column30: double (%f)
%   column31: double (%f)
%	column32: double (%f)
%   column33: double (%f)
%	column34: double (%f)
%   column35: double (%f)
%	column36: double (%f)
%   column37: double (%f)
%	column38: double (%f)
%   column39: double (%f)
%	column40: double (%f)
%   column41: double (%f)
%	column42: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%{dd/MM/yyyy}D%{HH:mm:ss}D%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'EmptyValue', NaN, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
Pandora103NDACCO3NO2ref20160619 = table(dataArray{1:end-1}, 'VariableNames', {'SpecNo','Year','Fractionalday','Fractionaltime','SZA','SolarAzimuthAngle','Elevviewingangle','Azimviewingangle','DateDDMMYYYY','Timehhmmss','NO2_VisRMS','NO2_VisRefZm','NO2_VisSlColo3','NO2_VisSlErro3','NO2_VisSlColno2','NO2_VisSlErrno2','NO2_VisSlColo4','NO2_VisSlErro4','NO2_VisSlColh2o','NO2_VisSlErrh2o','NO2_VisSlColring','NO2_VisSlErrring','O3_VisRMS','O3_VisRefZm','O3_VisSlColo3','O3_VisSlErro3','O3_VisSlColno2','O3_VisSlErrno2','O3_VisSlColo4','O3_VisSlErro4','O3_VisSlColh2o','O3_VisSlErrh2o','O3_VisSlColring','O3_VisSlErrring','Fluxes330','Fluxes340','Fluxes350','Fluxes380','Fluxes440','Fluxes450','Fluxes500','Fluxes550'});

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% Pandora103NDACCO3NO2ref20160619.DateDDMMYYYY=datenum(Pandora103NDACCO3NO2ref20160619.DateDDMMYYYY);Pandora103NDACCO3NO2ref20160619.Timehhmmss=datenum(Pandora103NDACCO3NO2ref20160619.Timehhmmss);

